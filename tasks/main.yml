---
- include: packages-{{ ansible_pkg_mgr }}.yml

- name: Create src dir
  file:
    path: /var/www
    state: directory

- name: Copy rundesk file to server
  copy:
    src: "{{ role_path }}/src/"
    dest: /var/www/

- name: Create Caddy user
  user: name={{ caddy_user }} system=yes createhome=yes home={{ caddy_home }}

- name: Get all Caddy releases
  get_url: url=https://api.github.com/repos/mholt/caddy/git/refs/tags dest={{ caddy_home }}/releases.txt force=yes
  when: caddy_update
  register: caddy_releases_cache

- name: Set Caddy features
  copy: content="{{ caddy_features }}" dest={{ caddy_home }}/features.txt
  when: caddy_update
  register: caddy_features_cache

- name: Download Caddy
  get_url: url=https://caddyserver.com/download/linux/{{ caddy_arch }}?plugins={{ caddy_features }} dest={{ caddy_home }}/caddy.tar.gz force=yes
  when: caddy_releases_cache.changed or caddy_features_cache.changed
  register: caddy_binary_cache

- name: Download Caddy
  get_url: url=https://caddyserver.com/download/linux/{{ caddy_arch }}?plugins={{ caddy_features }} dest={{ caddy_home }}/caddy.tar.gz

- name: Check if Caddy PGP key is already in keyring
  command: gpg --list-keys {{ caddy_pgp_key_id }}
  changed_when: gpg_list_keys|failed
  register: gpg_list_keys
  when: caddy_pgp_verify_signatures
  failed_when: "gpg_list_keys|failed and ('gpg: error reading key: No public key' not in gpg_list_keys.stderr and
                                          'gpg: error reading key: public key not found' not in gpg_list_keys.stderr)"

- name: Download Caddy PGP key
  command: gpg --keyserver-options timeout={{ caddy_pgp_recv_timeout }} --keyserver {{ caddy_pgp_key_server }} --recv-keys {{ caddy_pgp_key_id }}
  when: caddy_pgp_verify_signatures and gpg_list_keys.changed
  register: caddy_pgp_key
  changed_when: '"imported" in caddy_pgp_key.stdout'

- name: Download Caddy signature
  get_url: url=https://caddyserver.com/download/linux/{{ caddy_arch }}/signature?plugins={{ caddy_features }} dest={{ caddy_home }}/caddy.tar.gz.asc timeout=60
  when: caddy_pgp_verify_signatures

- name: Verify Caddy signature
  command: gpg --verify {{ caddy_home }}/caddy.tar.gz.asc {{ caddy_home }}/caddy.tar.gz
  when: caddy_pgp_verify_signatures

- name: Extract Caddy
  unarchive: src={{ caddy_home }}/caddy.tar.gz dest={{ caddy_home }} copy=no owner={{ caddy_user }}
  when: caddy_binary_cache.changed

- name: Extract Caddy
  unarchive: src={{ caddy_home }}/caddy.tar.gz dest={{ caddy_home }} creates={{ caddy_home }}/caddy copy=no owner={{ caddy_user }}

- name: Determine Caddy binary path
  set_fact:
    caddy_bin: "{{ caddy_bin_dir }}/caddy"

- name: Copy Caddy Binary
  copy: src={{ caddy_home }}/caddy dest={{ caddy_bin }} mode=0755 remote_src=True
  notify: Restart Caddy

- name: Create directories
  file: path={{ item }} state=directory owner={{ caddy_user }} mode='0770'
  with_items:
    - "{{ caddy_conf_dir }}"
    - "{{ caddy_certs_dir }}"

- name: Create log directory
  file: path={{ caddy_log_dir }} state=directory owner={{ caddy_user }} mode='0775'

- name: Create Caddyfile
  copy: content="{{ caddy_config }}" dest="{{ caddy_conf_dir }}/Caddyfile" owner={{ caddy_user }}
  notify: Restart Caddy

- name: Check if systemd is running
  stat: path=/run/systemd/system
  register: systemd

- name: Upstart service
  template: src={{ item }} dest=/etc/init/caddy.conf mode=0644
  when: not systemd.stat.exists
  with_first_found:
    - "caddy.conf"
  notify: Restart Caddy

- name: Systemd service
  template: src=caddy.service dest=/etc/systemd/system/caddy.service mode=0644
  when: systemd.stat.exists
  notify: Reload systemd service file

- name: Set capability on the binary file to be able to bind to TCP port <1024
  capabilities:
    path: "{{ caddy_bin }}"
    capability: cap_net_bind_service+ep
    state: present
  when: caddy_setcap

- name: Start Caddy service
  service: name=caddy state=started enabled=yes
